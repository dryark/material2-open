// Copyright 2016 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// stylelint-disable selector-class-pattern --
// Selector '.mdc-*' should only be used in this project.

@use '@material/animation/functions' as animation-functions;
@use '@material/elevation/mixins' as elevation-mixins;
@use '@material/elevation/variables' as elevation-variables;
@use '@material/feature-targeting/feature-targeting';
@use '@material/dom/mixins' as dom-mixins;
@use '@material/ripple/ripple';
@use '@material/ripple/ripple-theme';
@use '@material/rtl/mixins' as rtl-mixins;
@use '@material/shape/mixins' as shape-mixins;
@use '@material/shape/functions' as shape-functions;
@use '@material/theme/css';
@use '@material/theme/custom-properties';
@use '@material/theme/replace';
@use '@material/theme/state';
@use '@material/theme/theme-color';
@use '@material/theme/theme';
@use '@material/touch-target/mixins' as touch-target-mixins;
@use '@material/typography/typography';
@use './fab-custom-properties';
@use 'sass:math';
@use 'sass:list';

$height: 56px !default;
$mini-height: 40px !default;
$shape-radius: 50% !default;
$ripple-target: '.mdc-fab__ripple';

@mixin ripple-color($color, $query: feature-targeting.all()) {
  @include ripple-theme.states(
    $color,
    $query: $query,
    $ripple-target: $ripple-target
  );
}

@mixin accessible($container-color, $query: feature-targeting.all()) {
  @include container-color($container-color, $query: $query);

  $fill-tone: theme-color.tone($container-color);

  @if ($fill-tone == 'dark') {
    @include ink-color(text-primary-on-dark, $query: $query);
    @include ripple-theme.states(
      text-primary-on-dark,
      $query: $query,
      $ripple-target: $ripple-target
    );
  } @else {
    @include ink-color(text-primary-on-light, $query: $query);
    @include ripple-theme.states(
      text-primary-on-light,
      $query: $query,
      $ripple-target: $ripple-target
    );
  }
}

@mixin container-color($color, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @include feature-targeting.targets($feat-color) {
    @include theme.property(background-color, $color);
  }
}

@mixin icon-size($width, $height: $width, $query: feature-targeting.all()) {
  $feat-structure: feature-targeting.create-target($query, structure);

  .mdc-fab__icon {
    @include feature-targeting.targets($feat-structure) {
      width: $width;
      height: $height;
      font-size: $height;
    }
  }
}

@mixin ink-color($color, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @include feature-targeting.targets($feat-color) {
    @include theme.property(color, $color);
  }
}

///
/// Sets outline width only when button is in focus. Also sets padding to
/// include outline on focus (Helps prevent size jump on focus).
/// @param {Number} $width - Outline (border) width.
/// @param {Number|List} $padding [0] - Padding when button is not in focus.
///     Offsets padding based on given outline width on focus.
///
@mixin focus-outline-width(
  $width,
  $padding: 0,
  $query: feature-targeting.all()
) {
  $feat-structure: feature-targeting.create-target($query, structure);

  $padding: css.unpack-value($padding);
  $padding-fallbacks: (0 0 0 0);
  $is-padding-custom-prop: (false false false false);
  $is-width-custom-prop: custom-properties.is-custom-prop($width);
  $width-fallback: if(
    custom-properties.is-custom-prop($width),
    custom-properties.get-fallback($width),
    $width
  );
  $width: if(
    custom-properties.is-custom-prop($width),
    custom-properties.get-declaration-value($width),
    $width
  );

  // conform padding values and extract custom property metadata from them
  @for $i from 1 through list.length($padding) {
    $value: list.nth($padding, $i);
    $value-is-custom-prop: custom-properties.is-custom-prop($value);
    // css max will fail to compare a bare 0 to a px value
    $value: if($value == 0, 0px, $value);
    $value-fallback: if(
      $value-is-custom-prop,
      custom-properties.get-fallback($value),
      $value
    );
    $value: if(
      $value-is-custom-prop,
      custom-properties.get-declaration-value($value),
      $value
    );

    $padding: list.set-nth($padding, $i, $value);
    $padding-fallbacks: list.set-nth($padding-fallbacks, $i, $value-fallback);
    $is-padding-custom-prop: list.set-nth(
      $is-padding-custom-prop,
      $i,
      $value-is-custom-prop
    );
  }

  // Padding should include outline width which will be set on focus.
  // sass math required for IE since IE doesn't support css max
  $padding-top-fallback: math.max(
    list.nth($padding-fallbacks, 1),
    $width-fallback
  );
  $padding-right-fallback: math.max(
    list.nth($padding-fallbacks, 2),
    $width-fallback
  );
  $padding-bottom-fallback: math.max(
    list.nth($padding-fallbacks, 3),
    $width-fallback
  );
  $padding-left-fallback: math.max(
    list.nth($padding-fallbacks, 4),
    $width-fallback
  );

  $padding-top: replace.replace-string(
    'max(paddingval, width)',
    (
      paddingval: list.nth($padding, 1),
      width: $width,
    )
  );
  $padding-right: replace.replace-string(
    'max(paddingval, width)',
    (
      paddingval: list.nth($padding, 2),
      width: $width,
    )
  );
  $padding-bottom: replace.replace-string(
    'max(paddingval, width)',
    (
      paddingval: list.nth($padding, 3),
      width: $width,
    )
  );
  $padding-left: replace.replace-string(
    'max(paddingval, width)',
    (
      paddingval: list.nth($padding, 4),
      width: $width,
    )
  );

  $top-has-custom-prop: $is-width-custom-prop or
    list.nth($is-padding-custom-prop, 1);
  @include css.declaration(
    padding-top,
    $padding-top-fallback,
    $gss: (alternate: $top-has-custom-prop)
  );
  @if $top-has-custom-prop {
    @include css.declaration(padding-top, $padding-top);
  }

  $right-has-custom-prop: $is-width-custom-prop or
    list.nth($is-padding-custom-prop, 2);
  @include css.declaration(
    padding-right,
    $padding-right-fallback,
    $gss: (alternate: $right-has-custom-prop)
  );
  @if $right-has-custom-prop {
    @include css.declaration(padding-right, $padding-right);
  }

  $bottom-has-custom-prop: $is-width-custom-prop or
    list.nth($is-padding-custom-prop, 3);
  @include css.declaration(
    padding-bottom,
    $padding-bottom-fallback,
    $gss: (alternate: $bottom-has-custom-prop)
  );
  @if $bottom-has-custom-prop {
    @include css.declaration(padding-bottom, $padding-bottom);
  }

  $left-has-custom-prop: $is-width-custom-prop or
    list.nth($is-padding-custom-prop, 4);
  @include css.declaration(
    padding-left,
    $padding-left-fallback,
    $gss: (alternate: $left-has-custom-prop)
  );
  @if $left-has-custom-prop {
    @include css.declaration(padding-left, $padding-left);
  }

  @include ripple-theme.focus() {
    @include feature-targeting.targets($feat-structure) {
      border-style: solid;
      @include theme.property(border-width, $width);

      // sass math required for IE since IE doesn't support css max
      $padding-top-fallback: math.abs(
        list.nth($padding-fallbacks, 1) - $width-fallback
      );
      $padding-right-fallback: math.abs(
        list.nth($padding-fallbacks, 2) - $width-fallback
      );
      $padding-bottom-fallback: math.abs(
        list.nth($padding-fallbacks, 3) - $width-fallback
      );
      $padding-left-fallback: math.abs(
        list.nth($padding-fallbacks, 4) - $width-fallback
      );

      // max(a, calc(a * -1)) is equivalent to math.abs
      $padding-top: replace.replace-string(
        'max(paddingcalc, calc(paddingcalc * -1))',
        (
          paddingcalc: 'calc(paddingval - width)',
          paddingval: list.nth($padding, 1),
          width: $width,
        )
      );
      $padding-right: replace.replace-string(
        'max(paddingcalc, calc(paddingcalc * -1))',
        (
          paddingcalc: 'calc(paddingval - width)',
          paddingval: list.nth($padding, 2),
          width: $width,
        )
      );
      $padding-bottom: replace.replace-string(
        'max(paddingcalc, calc(paddingcalc * -1))',
        (
          paddingcalc: 'calc(paddingval - width)',
          paddingval: list.nth($padding, 3),
          width: $width,
        )
      );
      $padding-left: replace.replace-string(
        'max(paddingcalc, calc(paddingcalc * -1))',
        (
          paddingcalc: 'calc(paddingval - width)',
          paddingval: list.nth($padding, 4),
          width: $width,
        )
      );

      @include css.declaration(
        padding-top,
        $padding-top-fallback,
        $gss: (alternate: $top-has-custom-prop)
      );
      @if $top-has-custom-prop {
        @include css.declaration(padding-top, $padding-top);
      }
      @include css.declaration(
        padding-right,
        $padding-right-fallback,
        $gss: (alternate: $right-has-custom-prop)
      );
      @if $right-has-custom-prop {
        @include css.declaration(padding-right, $padding-right);
      }
      @include css.declaration(
        padding-bottom,
        $padding-bottom-fallback,
        $gss: (alternate: $bottom-has-custom-prop)
      );
      @if $bottom-has-custom-prop {
        @include css.declaration(padding-bottom, $padding-bottom);
      }
      @include css.declaration(
        padding-left,
        $padding-left-fallback,
        $gss: (alternate: $left-has-custom-prop)
      );
      @if $left-has-custom-prop {
        @include css.declaration(padding-left, $padding-left);
      }
    }
  }
}

///
/// Sets outline color only when button is in focus. Use `focus-outline-width()`
/// to set appropriate outline width.
/// @param {Color} $color - Outline (border) color.
///
@mixin focus-outline-color($color, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @include ripple-theme.focus() {
    @include feature-targeting.targets($feat-color) {
      @include theme.property(border-color, $color);
    }
  }
}

@mixin shape-radius(
  $radius,
  $rtl-reflexive: false,
  $query: feature-targeting.all()
) {
  &:not(.mdc-fab--extended) {
    // Do not specify $component-height for shape radius. FABs are circular,
    // which means they can use percentage border radius without resolving to
    // a component height.
    @include shape-mixins.radius($radius, $rtl-reflexive, $query: $query);

    #{$ripple-target} {
      @include shape-mixins.radius($radius, $rtl-reflexive, $query: $query);
    }
  }
}
